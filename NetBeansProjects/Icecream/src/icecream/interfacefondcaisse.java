

package icecream;

import icecream.*;
import java.awt.*;
import javax.swing.*;
import java.sql.*;
import icecream.interfaceemployer;
import java.util.Calendar;
import java.util.GregorianCalendar;

public class interfacefondcaisse extends javax.swing.JFrame {
     
    //Variable globale du menu eployer
    interfaceemployer menu;
    
    //Preparation des variable de co
    Connection conn = null;
    ResultSet rs,rs1,rs2= null;
    PreparedStatement pst,pst1,pst2= null;
    
    //Variable globale ff correspondant au Fond Fermeture
    float ff=0;
    String fo;
    String datehier;
    String dateaujourdhui;
    String recette;
    
    
    public interfacefondcaisse(interfaceemployer menu) {
       
        this.menu=menu;
        initComponents();
        conn=Icecream.connecterDB();
        this.setLocationRelativeTo(null);
        ouverture();
        insert.setEnabled(false);
        
        hier.setVisible(false);
        aujourdhui.setVisible(false);
         
        date();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fond_d_ouverture = new javax.swing.JLabel();
        Fond_de_fermeture = new javax.swing.JLabel();
        fond_fermeture = new javax.swing.JLabel();
        Calculer = new javax.swing.JButton();
        fond_ouverture = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        Retour = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        hier = new javax.swing.JLabel();
        aujourdhui = new javax.swing.JLabel();
        insert = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        Recete = new javax.swing.JLabel();
        recet = new javax.swing.JLabel();
        mes_save = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Fond_d_ouverture.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Fond_d_ouverture.setText("Fond d'ouverture :");

        Fond_de_fermeture.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Fond_de_fermeture.setText("Fond fermeture :");

        fond_fermeture.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        fond_fermeture.setMaximumSize(new java.awt.Dimension(93, 15));
        fond_fermeture.setMinimumSize(new java.awt.Dimension(93, 15));

        Calculer.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Calculer.setText("Calculer la recette");
        Calculer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CalculerItemStateChanged(evt);
            }
        });
        Calculer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculerActionPerformed(evt);
            }
        });

        fond_ouverture.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Fond Caisse");

        Retour.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Retour.setText("Retour");
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });

        hier.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        hier.setText("jLabel3");

        aujourdhui.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        aujourdhui.setText("jLabel3");

        insert.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        insert.setText("Enregistrer la caise");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        Recete.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Recete.setText("Recette :");

        recet.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator3)
            .addComponent(jSeparator2)
            .addComponent(jSeparator4)
            .addGroup(layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hier)
                        .addGap(18, 18, 18)
                        .addComponent(aujourdhui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Retour))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(Fond_d_ouverture)
                                .addGap(26, 26, 26)
                                .addComponent(fond_ouverture, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addComponent(mes_save, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 86, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Recete)
                                .addGap(18, 18, 18)
                                .addComponent(recet, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Calculer, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(Fond_de_fermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fond_fermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(insert)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fond_d_ouverture)
                    .addComponent(fond_ouverture, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Recete)
                            .addComponent(Calculer))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(recet, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fond_fermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Fond_de_fermeture)
                    .addComponent(insert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mes_save, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Retour)
                    .addComponent(hier)
                    .addComponent(aujourdhui)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
    *   Calcul du fond fermeture en fonction du totale des prix de commande par point de vente
    */
       
    private void CalculerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculerActionPerformed
        // TODO add your handling code here: 
        try{
            //requete renvoyant la recette du jours
            String sql="SELECT SUM(`prix_TTC`)as recette FROM `commande`,`employer`,`point_de_vente` WHERE `commande`.id_pdv = `point_de_vente`.id_pdv AND `commande`.id_emp=`employer`.id_emp AND `Date_C`='"+dateaujourdhui+"'  AND Ville='"+menu.pdv.getText()+"'";
            //Initialisation du traitement et exécution de la requete
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
           
            if(rs.next()){
               recet.setText(rs.getString("recette"));
               
            }

        }
        
        catch(Exception e){
          JOptionPane.showMessageDialog(null,e);
        } 
        recette=recet.getText();
        if(recette==null){
            recet.setText("Il n'y a pas de commande effectué aujourd'hui");
        }
        if(recette!=null){
            fondfermeture();
            insert.setEnabled(true); 
        }
        


    }//GEN-LAST:event_CalculerActionPerformed

    
    //---------------------------------------------------------------------------------
    
    /**
     * Boutton retour sur le menu principale 
    */
    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        // TODO add your handling code here:
        
        //affichage du menu et fermeture de cette fenetre
        menu.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_RetourActionPerformed

    //---------------------------------------------------------------------------------
    
    /**
     * Boutton pour enregistrer la caisse 
     */
    
    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
        
        try{
            //requete sql permettant l'ajout du fond de caisse
            String sql1="INSERT INTO `caisse`(`id_caisse`, `Date_P`, `Fond_ouverture`, `Fond_fermeture`, `Recette`, `id_pdv`) VALUES (null,'"+dateaujourdhui+"','"+fo+"','"+ff+"','"+recette+"','"+menu.id.getText()+"')";

            pst1=conn.prepareStatement(sql1);
            pst1.execute();

            //Le jLabel mes_save affiche le message suivant 
            mes_save.setText("L'Enregistrement de caisse a été effectué");  
        }
        
        catch(Exception e){
           
            JOptionPane.showMessageDialog(null,e);
            
        } 
    }//GEN-LAST:event_insertActionPerformed

    private void CalculerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CalculerItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_CalculerItemStateChanged

    //---------------------------------------------------------------------------------
    
    
    /*
    * Fonction pour récupere le fond_fermeture de la veille 
    * Le Fond ouverture d'aujourd'hui = fond_fermeture de la veille 
    */
    
    private void ouverture(){
        
        try{
            
            //Selectione le fond fermeture de la veille afin d'ouvri la casse fond fermeture =) fond_ouverture
       
            String sql2="SELECT `Fond_fermeture` FROM `caisse`,`point_de_vente` WHERE `caisse`.id_pdv=`point_de_vente`.id_pdv AND `Date_P`='"+datehier+"' AND Ville='"+menu.pdv.getText()+"'";
       
            //Initialisation du traitement et exécution de la requete
            pst2=conn.prepareStatement(sql2);
            rs2=pst2.executeQuery(sql2);
        
            //Si requete est bonne alors fond ouvertutre le resultat de la requete
            if(rs2.next()){
                fond_ouverture.setText(rs2.getString("Fond_fermeture"));
                
            }       
        }

        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
        
       // fo est une variable globale, fond ouverture
       fo=fond_ouverture.getText();
       if (fo.equals("")){
           fond_ouverture.setText("0");
           fo=fond_ouverture.getText();
       }
    }

    
    //---------------------------------------------------------------------------------    
    
    /*
    * Fonction pour avoir la date du jour ou date - 1
    */
    
    private void date(){
        //Variable declarant le jours et le mois
        String j;
        String m;
        
        //fonction pour avoir le calendrier
        Calendar cal= new GregorianCalendar();
        int mois =   cal.get(Calendar.MONTH);
        int annees = cal.get(Calendar.YEAR);
        int jours =  cal.get(Calendar.DAY_OF_MONTH);
            
        // hier(jLabel) affiche la date hier
        hier.setText((annees)+"-"+(mois+1)+"-"+(jours-1));
        //
        aujourdhui.setText((annees)+"-"+(mois+1)+"-"+(jours));
 
         // aujourdhui(jLabel) affiche la date d'aujourdhui
        dateaujourdhui=aujourdhui.getText();
        datehier=hier.getText();
        
    }
    
        //---------------------------------------------------------------------------------
    
    
    /**
     * Fonction  recupérant la recette
    */
    
    private void fondfermeture(){
        //Forçage de type String =) Float
        ff=Float.parseFloat(recette)+Float.parseFloat(fo); 
        fond_fermeture.setText(""+ff);           
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Calculer;
    private javax.swing.JLabel Fond_d_ouverture;
    private javax.swing.JLabel Fond_de_fermeture;
    public javax.swing.JLabel Recete;
    private javax.swing.JButton Retour;
    public javax.swing.JLabel aujourdhui;
    public javax.swing.JLabel fond_fermeture;
    public javax.swing.JLabel fond_ouverture;
    public javax.swing.JLabel hier;
    public javax.swing.JButton insert;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public javax.swing.JLabel mes_save;
    public javax.swing.JLabel recet;
    // End of variables declaration//GEN-END:variables
}
